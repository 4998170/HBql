    ------
    Functions
    ------
    ------

String Functions

*-------------------+--------------+--------------------------+----------------------------------+---------------------+
|| Function         || Return Type || Description             ||Example                          ||Result              |
*--+--+--+--+
| Trim(string)      | string       | Returns string with leading and trailing whitespace omitted | trim(' val ') |  'val'   |
*--+--+--+--+
| Upper(string)     | string       | Returns the uppercase version of string | upper('val') |  'VAL'   |
*--+--+--+--+
| Lower(string)     | string       | Returns the lowercase version of string | lower('VAL') |  'val'   |
*--+--+--+--+
| Concat(string1, string2) | string  | Returns the concatenation of string 1 and string2 | concat('VAL', 'val') |  'VALval'   |
*--+--+--+--+
| Replace(string1, string2, string3) | string  | Returns all occurences of string2 with string3 in string1 | replace('val', 'v', 'l') |  'lal'   |
*--+--+--+--+
| Substring(string, int1, int2) | string  | Returns the string from 0-based index int1 with length int2 | subString('val', '0', '2') |  'va'   |
*--+--+--+--+
| ZeroPad(int1, int2) | string | Returns the zero-padded string of int1 with int2 width | zeroPad(4, 5) |  '00004'   |
*--+--+--+--+
| Length(string) | int | Returns the length of string | length('val') |  3   |
*--+--+--+--+
| IndexOf(string1, string2) | int | Returns the 0-based index of string2 in string1 (-1 if not found)| indexOf('val', 'v') |  0   |
*--+--+--+--+
| Repeat(string, int) | string | Returns the string repeated int times | repeat('abc', 3) |  'abcabcabc'   |
*--+--+--+--+

Numeric Functions

*-------------------+--------------+--------------------------+----------------------------------+---------------------+
|| Function         || Return Type || Description             ||Example                          ||Result              |
*--+--+--+--+
| Abs(number)     | number     | Returns absolute value of number   | abs(-34)    |  34      |
*--+--+--+--+
| Lesser(number1, number2) | number | Returns the smaller of number1 and number2   | lesser(2, 3)    |  2      |
*--+--+--+--+
| Greater(number1, number2) | number | Returns the greater of number1 and number2   | greater(2, 3)    |  3      |
*--+--+--+--+
| Short(string)     | short     | Returns short value of string   | short('34')    |  34      |
*--+--+--+--+
| Integer(string)   | int       | Returns integer value of string | integer('34')  |  34      |
*--+--+--+--+
| Long(string)      | long      | Returns long value of string    | long('34')     |  34L     |
*--+--+--+--+
| Float(string)     | float     | Returns float value of string   | float('34.0')  |  34.0F   |
*--+--+--+--+
| Double(string)    | double    | Returns double value of string  | double('34.0') |  34.0D   |
*--+--+--+--+
| RandomInteger()   | int       | Returns random int value        | randomInteger() |  random int value     |
*--+--+--+--+
| RandomLong()      | long      | Returns random long value       | randomLong()    |  random long value    |
*--+--+--+--+
| RandomFloat()     | float     | Returns random float value      | randomFloat()   |  random float value   |
*--+--+--+--+
| RandomDouble()    | double    | Returns random double value     | randomDouble()  |  random double value  |
*--+--+--+--+

Boolean Functions

*-------------------+--------------+--------------------------+----------------------------------+---------------------+
|| Function         || Return Type || Description             ||Example                          ||Result              |
*--+--+--+--+
| DefinedInRow(column)| boolean | Returns true if column is defined in current row| definedInRow(f1:val1) |  true if f1:val1 is defined in current row |
*--+--+--+--+
| RandomBoolean()| boolean | Returns random boolean value| randomBoolean() |  random boolean value |
*--+--+--+--+
| Eval(string) | boolean  | Returns the evaluation of string | eval('34 = 34') | true  |
*--+--+--+--+
| MappingExists(string) | boolean  | Returns true if mapping exists | mappingExists('foo') | true if mapping foo exists  |
*--+--+--+--+
| TableExists(string) | boolean  | Returns true if table exists | tableExists('foo') | true if table foo exists |
*--+--+--+--+
| TableEnabled(string) | boolean  | Returns true if table is enabled | tableEnabled('foo') | true if table foo is enabled |
*--+--+--+--+
| TableAvailable(string) | boolean  | Returns true if table is available | tableAvailable('foo') | true if table foo is available |
*--+--+--+--+
| FamilyExistsForTable(string, string) | boolean  | Returns true if table has family | familyExistsForTable('f1', 'foo') | true if table foo has family f1 |
*--+--+--+--+
| FamilyExistsForMapping(string, string) | boolean  | Returns true if table referenced by mapping has family | familyExistsForMapping('f1', 'foomap') | true if mapping foomap has family f1 |
*--+--+--+--+
| IndexExistsForTable(string, string) | boolean  | Returns true if table has index | indexExistsForTable('idx1', 'foo') | true if table foo has index idx1 |
*--+--+--+--+
| IndexExistsForMapping(string, string) | boolean  | Returns true if table referenced by mapping has index | indexExistsForMapping('idx1', 'foomap') | true if table foo has index idx1 |
*--+--+--+--+
| AsyncExecutorExists(string) | boolean  | Returns true if named AsyncExecutor exists | asyncExecutorExists('exec') | true if AsyncExecutor exec is declared |
*--+--+--+--+
| QueryExecutorPoolExists(string) | boolean  | Returns true if named QueryExecutorPool exists | queryExecutorPoolExists('execPool') | true if QueryExecutorPool execPool is declared |
*--+--+--+--+

Date Functions

*-------------------+--------------+--------------------------+----------------------------------+---------------------+
|| Function         || Return Type || Description             ||Example                          ||Result              |
*--+--+--+--+
| Now()| date | Returns date value of current time| now() |  date value of current time |
*--+--+--+--+
| Date(string1, string2)| date | Returns date value of string1 using string2 format| date('12/10/94', 'mm/dd/yy') |  date value '12/10/94' |
*--+--+--+--+
| LongToDate(long) | date  | Returns date value of long ms since 1/1/70 | longToDate(758189520000L) |  date value '12/10/94' |
*--+--+--+--+
| DateToLong(date) | long  | Returns date value of long ms since 1/1/70 | dateToLong(date('12/10/94', 'mm/dd/yy')) |  758189520000L |
*--+--+--+--+
| RandomDate()     | date  | Returns random date value | randomDate()    |  random date value  |
*--+--+--+--+
| MinDate()| date | Returns minimum date value| MinDate() |  longToDate(0) |
*--+--+--+--+
| MaxDate()| date | Returns maximum date value| MaxDate() |  longToDate(Long.MAX_VALUE) |
*--+--+--+--+

Interval Functions

*-------------------+--------------+--------------------------+----------------------------------+---------------------+
|| Function         || Return Type || Description             ||Example                          ||Result              |
*--+--+--+--+
| Milli(long)| interval | Returns interval equal to long milliseconds| milli(3) |  3 millisecond interval |
*--+--+--+--+
| Second(long)| interval | Returns interval equal to long seconds | second(3) |  3 second interval |
*--+--+--+--+
| Hour(long)| interval | Returns interval equal to long hours | hour(3) |  3 hour interval |
*--+--+--+--+
| Day(long)| interval | Returns interval equal to long days | day(3) |  3 day interval |
*--+--+--+--+
| Week(long)| interval | Returns interval equal to long weeks | week(3) |  3 week interval |
*--+--+--+--+
| Year(long)| interval | Returns interval equal to long years | year(3) |  3 year interval |
*--+--+--+--+

Aggregate Functions

*-------------------+--------------+--------------------------+----------------------------------+---------------------+
|| Function         || Return Type || Description             ||Example                          ||Result              |
*--+--+--+--+
| Min(expression)| type of expression  | Returns minimum value of expression across all values| min(f2:val1) |  minimum f2:val1 |
*--+--+--+--+
| Max(expression)| type of expression | Returns maximum value of expression across all values | max(val2) |  maximum val2 |
*--+--+--+--+
| Count()| long | Returns number of values | count() | Number of values |
*--+--+--+--+




