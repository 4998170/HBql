    -----
    CREATE QUERY EXECUTOR POOL
    -----
    -----


CREATE QUERY EXECUTOR POOL

*Syntax

---------------------------

CREATE [QUERY] EXECUTOR POOL pool_name ['(' executorArg [, ...] ')'] [IF bool_expr]

executorArg:
    MAX_EXECUTOR_POOL_SIZE ':' int_expr
    | CORE_THREAD_COUNT ':' int_expr
    | MAX_THREAD_COUNT ':' int_expr
    | THREADS_READ_RESULTS ':' bool_expr
    | COMPLETION_QUEUE_SIZE ':' int_expr

---------------------------

*Description

    Creates a named QueryExecutor pool.

    * A QueryExecutor provides a thread pool for processing query results.  A QueryExecutor can be assigned
    from a QueryExecutorPool using HConncetion.setQueryExecutorPoolName(), or a dedicated QueryExecutor can
    be assigned using HConncetion.setQueryExecutor().

    * A QueryExecutorPool has a maximum size (MAX_EXECUTOR_POOL_SIZE parameter)
    and each QueryExecutor in the pool has a core number of threads (CORE_THREAD_COUNT parameter) and a 
    maximum number of threads (MAX_THREAD_COUNT parameter).

    * A QueryExecutor pool request will block if all elements in the pool have been already taken.
    A pooled QueryExecutor is released back to a pool when the ResultSet is closed (when the ResultSet
    iterator is completed).

    * QueryExecutors are used in queries such that each key or key range is processed by a different thread in the
    QueryExecutor thread pool.  Keys and key ranges correspond to Gets and Scans in HBase.  QueryExecutors can
    assume two behaviors for processing query data: the threads can make a Get or Scan request and return the
    ResultScanner objects back to the main thread, which will then iterate through the Result values.
    Or, the threads can iterate through the ResultScanner results and return the Result objects back to
    the main thread.

    * The THREADS_READ_RESULTS parameter  determines the
    thread processing behavior. If THREADS_READ_RESULTS is false, the order of Result values within a
    Scans will be preserved, but at a cost of less concurrency.  If THREADS_READ_RESULTS is true, then Result
    values across Scan results will be merged in the ResultSet iterator.
    There is no guarantee on the order in which keys and key ranges are returned.

    * The COMPLETION_QUEUE_SIZE parameter is the size of the queue used by the threads to return data
    to the main thread.  If THREADS_READ_RESULTS is false, then it is the size of the queue used to
    return ResultScanner objects and if THREADS_READ_RESULTS is true, it is the the size of the queue used to
    Result objects.

    * If an HConnection is from an HConnectionPool, the QueryExecutor assignments (dedicated or from a pool) are
      reset when HConnection.close() is called.  Thus, QueryExecutor assignments should be made when an
      HConnection is retrieved from a pool.

    * All the executorArg parameters are optional.  If unspecified, the values default to:

        ** QueryExecutorPoolManager.defaultMaxPoolSize

        ** QueryExecutorPoolManager.defaultThreadCount

        ** QueryExecutorPoolManager.defaultQueueSize
        
        ** QueryExecutorPoolManager.defaultThreadsReadResults


*Example

%{snippet|id=create-executor-pool|file=src/test/java/org/apache/hadoop/hbase/hbql/ExamplesTest.java}
